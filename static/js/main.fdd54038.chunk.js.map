{"version":3,"sources":["Episode.js","filler.js","App.js","serviceWorker.js","index.js"],"names":["Episode","props","episode","url","watchLocationState","setWatchLocation","isWatched","style","opacity","backgroundColor","height","border","margin","padding","display","justifyContent","alignItems","onClick","width","color","href","goodEps","split","cleanList","map","num","trim","forEach","numstring","startNum","endNum","includes","i","push","console","log","sort","a","b","App","useState","setWatchLocationState","useEffect","reactLocalStorage","get","location","set","className","textAlign","position","left","bottom","showData","filter","ep","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAiDeA,G,MA9CC,SAAAC,GAAU,IAChBC,EAAuDD,EAAvDC,QAASC,EAA8CF,EAA9CE,IAAKC,EAAyCH,EAAzCG,mBAAoBC,EAAqBJ,EAArBI,iBAEpCC,GAAaF,IAAuBF,EAG1C,OACE,yBACEK,MAAO,CACLC,QAASF,GAAa,KACtBG,gBAAiBH,GAAa,OAC9BI,OAAQ,QACRC,OAAQ,kBACRC,OAAQ,UACRC,QAAS,MACTC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,YAGd,yDAE8Bd,GAE9B,uBACEe,QAAS,kBAAMZ,EAAiBH,IAChCK,MAAO,CACLW,MAAO,QACPT,gBAAiBH,EAAY,UAAW,QACxCQ,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZG,MAAO,SAETC,KAAMjB,GAEN,6BAEIG,EAAY,UAAH,oBAA4BJ,QCzC7CmB,EACF,4bAEFA,EAAQC,MAAM,KAEd,IAAIC,EAAY,GAEhBF,EACGC,MAAM,KACNE,KAAI,SAAAC,GAAG,OAAIA,EAAIC,UACfC,SAAQ,SAAAC,GACP,IAAIC,EACAC,EAEAF,EAAUG,SAAS,MACrBF,GAAYD,EAAUN,MAAM,KAAK,GACjCQ,GAAUF,EAAUN,MAAM,KAAK,KAE/BO,GAAYD,EACZE,GAAUF,GAEZ,IAAK,IAAII,EAAIH,EAAUG,GAAKF,EAAQE,IAClCT,EAAUU,KAAK,CACX/B,QAAS8B,EACT7B,IAAI,uDAAD,OAAyD6B,EAAzD,yBAKbE,QAAQC,IAAIZ,EAAUa,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnC,QAAUoC,EAAEpC,YAEpCqB,QAAUa,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnC,QAAUoC,EAAEpC,W,OCqBvCqC,MA9Cf,WAAgB,IAAD,EAEuCC,mBAAS,GAFhD,mBAENpC,EAFM,KAEcqC,EAFd,KAIbC,qBAAU,WACRD,EAAsBE,oBAAkBC,IAAI,oBAC3C,IAEH,IAMMvC,EAAmB,SAACwC,GACxBJ,EAAsBI,GACtBF,oBAAkBG,IAAI,gBAAiBD,IAIzC,OACE,yBAAKE,UAAU,OACX,6BACE,4DAEA,yBACA9B,QAlBY,WAClBiB,QAAQC,IAAI,aACZM,EAAsB,GACtBE,oBAAkBG,IAAI,gBAAiB,IAgBjCvC,MAAO,CACLI,OAAQ,kBACRF,gBAAiB,UACjBuC,UAAW,SACXnC,QAAS,MACToC,SAAU,QACV/B,MAAO,QACPgC,KAAM,MACNC,OAAQ,QAVV,eAeHC,EAASC,QAAO,SAAAC,GAAE,OAAIA,EAAGpD,SAAWE,KAAoBoB,KAAI,SAAC8B,EAAItB,GAAL,OAAW,kBAAC,EAAD,CAAS3B,iBAAkBA,EAAkBD,mBAAoBA,EAAoBmD,IAAKvB,EAAG9B,QAASoD,EAAGpD,QAASC,IAAKmD,EAAGnD,WClCpLqD,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.fdd54038.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Episode = props => {\n  const { episode, url, watchLocationState, setWatchLocation } = props\n\n  const isWatched = +watchLocationState === episode\n//   const isNext = showData[showData.findIndex((ep) => ep.episode === episode) + 1].episode === episode\n\n  return (\n    <div\n      style={{\n        opacity: isWatched && '.8',\n        backgroundColor: isWatched && 'gray',\n        height: '100px',\n        border: '5px solid black',\n        margin: '5px 0px',\n        padding: '5px',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'stretch'\n      }}\n    >\n      <div>\n     \n          Naruto Shippuden Episode {episode}\n     </div>\n      <a\n        onClick={() => setWatchLocation(episode)}\n        style={{\n          width: '100px',\n          backgroundColor: isWatched ? '#B43A12': 'green',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: 'white'\n        }}\n        href={url}\n      >\n        <div>\n            { \n            isWatched ? 'Watched' : `Watch ep. ${episode}` \n            }\n        </div>\n      </a>\n    </div>\n  )\n}\n\nexport default Episode\n","let goodEps =\n  '20-23, 26-27, 29-44, 46-48, 51-53, 55, 72-88, 113-114, 116-126, 129-143, 152-169, 172-175, 197-212, 214-222, 243-256, 261-270, 272-278, 282-283, 296-302, 321-323, 325-326, 329, 332-337, 339-345, 363-375, 378-384, 387, 391-393, 414-415, 418, 420-421, 424-425, 459, 463, 470, 473-477, 484-500, 1-19, 24-25, 45, 49-50, 54, 56, 89-90, 115, 127-128, 213, 324, 327-328, 330-331, 338, 346, 362, 385-386, 419, 426, 451-458, 460-462, 471-472, 478-479'\n\ngoodEps.split(',')\n\nlet cleanList = []\n\ngoodEps\n  .split(',')\n  .map(num => num.trim())\n  .forEach(numstring => {\n    let startNum\n    let endNum\n\n    if (numstring.includes('-')) {\n      startNum = +numstring.split('-')[0]\n      endNum = +numstring.split('-')[1]\n    } else {\n      startNum = +numstring\n      endNum = +numstring\n    }\n    for (let i = startNum; i <= endNum; i++) {\n      cleanList.push({\n          episode: i,\n          url: `https://ww6.theanime.place/naruto-shippuden-episode-${i}-english-dubbed/`\n      })\n    }\n  })\n\nconsole.log(cleanList.sort((a, b) => a.episode - b.episode))\n\nexport default cleanList.sort((a, b) => a.episode - b.episode)","import React,  {useState, useEffect} from 'react';\nimport './App.css';\nimport Episode from './Episode.js'\nimport showData from './filler.js'\nimport {reactLocalStorage} from 'reactjs-localstorage';\n\nfunction App() {\n\n  const [watchLocationState, setWatchLocationState] = useState(0);\n\n  useEffect(() => {\n    setWatchLocationState(reactLocalStorage.get('watchLocation'))\n  }, []);\n\n  const handleReset = () => {\n    console.log('resetting')\n    setWatchLocationState(0)\n    reactLocalStorage.set('watchLocation', 0)\n  }\n\n  const setWatchLocation = (location) => {\n    setWatchLocationState(location)\n    reactLocalStorage.set('watchLocation', location)\n  } \n\n\n  return (\n    <div className=\"App\">\n        <div>\n          <h1>Filler Free Naruto Shippuden</h1>\n\n          <div\n          onClick={handleReset}\n          style={{\n            border: '3px solid black',\n            backgroundColor: '#B43A12',\n            textAlign: 'center',\n            padding: '5px',\n            position: 'fixed',\n            width: '100px',\n            left: '0px',\n            bottom: '0px'\n          }}\n          >reset list</div>\n        </div>\n\n      {showData.filter(ep => ep.episode >= watchLocationState).map((ep, i) => <Episode setWatchLocation={setWatchLocation} watchLocationState={watchLocationState} key={i} episode={ep.episode} url={ep.url} />)}\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}